// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	v1alpha1 "github.com/Mellanox/nic-configuration-operator/api/v1alpha1"
	mock "github.com/stretchr/testify/mock"
)

// ConfigurationUtils is an autogenerated mock type for the ConfigurationUtils type
type ConfigurationUtils struct {
	mock.Mock
}

// GetLinkType provides a mock function with given fields: name
func (_m *ConfigurationUtils) GetLinkType(name string) string {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetLinkType")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetMaxReadRequestSize provides a mock function with given fields: pciAddr
func (_m *ConfigurationUtils) GetMaxReadRequestSize(pciAddr string) (int, error) {
	ret := _m.Called(pciAddr)

	if len(ret) == 0 {
		panic("no return value specified for GetMaxReadRequestSize")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int, error)); ok {
		return rf(pciAddr)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(pciAddr)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pciAddr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPCILinkSpeed provides a mock function with given fields: pciAddr
func (_m *ConfigurationUtils) GetPCILinkSpeed(pciAddr string) (int, error) {
	ret := _m.Called(pciAddr)

	if len(ret) == 0 {
		panic("no return value specified for GetPCILinkSpeed")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int, error)); ok {
		return rf(pciAddr)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(pciAddr)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pciAddr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQoSSettings provides a mock function with given fields: device, interfaceName
func (_m *ConfigurationUtils) GetQoSSettings(device *v1alpha1.NicDevice, interfaceName string) (*v1alpha1.QosSpec, error) {
	ret := _m.Called(device, interfaceName)

	if len(ret) == 0 {
		panic("no return value specified for GetQoSSettings")
	}

	var r0 *v1alpha1.QosSpec
	var r1 error
	if rf, ok := ret.Get(0).(func(*v1alpha1.NicDevice, string) (*v1alpha1.QosSpec, error)); ok {
		return rf(device, interfaceName)
	}
	if rf, ok := ret.Get(0).(func(*v1alpha1.NicDevice, string) *v1alpha1.QosSpec); ok {
		r0 = rf(device, interfaceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.QosSpec)
		}
	}

	if rf, ok := ret.Get(1).(func(*v1alpha1.NicDevice, string) error); ok {
		r1 = rf(device, interfaceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetNicFirmware provides a mock function with given fields: ctx, pciAddr
func (_m *ConfigurationUtils) ResetNicFirmware(ctx context.Context, pciAddr string) error {
	ret := _m.Called(ctx, pciAddr)

	if len(ret) == 0 {
		panic("no return value specified for ResetNicFirmware")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, pciAddr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetMaxReadRequestSize provides a mock function with given fields: pciAddr, maxReadRequestSize
func (_m *ConfigurationUtils) SetMaxReadRequestSize(pciAddr string, maxReadRequestSize int) error {
	ret := _m.Called(pciAddr, maxReadRequestSize)

	if len(ret) == 0 {
		panic("no return value specified for SetMaxReadRequestSize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int) error); ok {
		r0 = rf(pciAddr, maxReadRequestSize)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetQoSSettings provides a mock function with given fields: device, spec
func (_m *ConfigurationUtils) SetQoSSettings(device *v1alpha1.NicDevice, spec *v1alpha1.QosSpec) error {
	ret := _m.Called(device, spec)

	if len(ret) == 0 {
		panic("no return value specified for SetQoSSettings")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1alpha1.NicDevice, *v1alpha1.QosSpec) error); ok {
		r0 = rf(device, spec)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewConfigurationUtils creates a new instance of ConfigurationUtils. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConfigurationUtils(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConfigurationUtils {
	mock := &ConfigurationUtils{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
