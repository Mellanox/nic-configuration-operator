// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	v1alpha1 "github.com/Mellanox/nic-configuration-operator/api/v1alpha1"
	mock "github.com/stretchr/testify/mock"
)

// ConfigurationManager is an autogenerated mock type for the ConfigurationManager type
type ConfigurationManager struct {
	mock.Mock
}

// ApplyDeviceNvSpec provides a mock function with given fields: ctx, device
func (_m *ConfigurationManager) ApplyDeviceNvSpec(ctx context.Context, device *v1alpha1.NicDevice) (bool, error) {
	ret := _m.Called(ctx, device)

	if len(ret) == 0 {
		panic("no return value specified for ApplyDeviceNvSpec")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.NicDevice) (bool, error)); ok {
		return rf(ctx, device)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.NicDevice) bool); ok {
		r0 = rf(ctx, device)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1alpha1.NicDevice) error); ok {
		r1 = rf(ctx, device)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplyDeviceRuntimeSpec provides a mock function with given fields: device
func (_m *ConfigurationManager) ApplyDeviceRuntimeSpec(device *v1alpha1.NicDevice) error {
	ret := _m.Called(device)

	if len(ret) == 0 {
		panic("no return value specified for ApplyDeviceRuntimeSpec")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1alpha1.NicDevice) error); ok {
		r0 = rf(device)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResetNicFirmware provides a mock function with given fields: ctx, device
func (_m *ConfigurationManager) ResetNicFirmware(ctx context.Context, device *v1alpha1.NicDevice) error {
	ret := _m.Called(ctx, device)

	if len(ret) == 0 {
		panic("no return value specified for ResetNicFirmware")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.NicDevice) error); ok {
		r0 = rf(ctx, device)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateDeviceNvSpec provides a mock function with given fields: ctx, device
func (_m *ConfigurationManager) ValidateDeviceNvSpec(ctx context.Context, device *v1alpha1.NicDevice) (bool, bool, error) {
	ret := _m.Called(ctx, device)

	if len(ret) == 0 {
		panic("no return value specified for ValidateDeviceNvSpec")
	}

	var r0 bool
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.NicDevice) (bool, bool, error)); ok {
		return rf(ctx, device)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.NicDevice) bool); ok {
		r0 = rf(ctx, device)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1alpha1.NicDevice) bool); ok {
		r1 = rf(ctx, device)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *v1alpha1.NicDevice) error); ok {
		r2 = rf(ctx, device)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewConfigurationManager creates a new instance of ConfigurationManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConfigurationManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConfigurationManager {
	mock := &ConfigurationManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
