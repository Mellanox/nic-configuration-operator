// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	pci "github.com/jaypipes/ghw/pkg/pci"
	mock "github.com/stretchr/testify/mock"
)

// DeviceDiscoveryUtils is an autogenerated mock type for the DeviceDiscoveryUtils type
type DeviceDiscoveryUtils struct {
	mock.Mock
}

// GetFirmwareVersionAndPSID provides a mock function with given fields: pciAddr
func (_m *DeviceDiscoveryUtils) GetFirmwareVersionAndPSID(pciAddr string) (string, string, error) {
	ret := _m.Called(pciAddr)

	if len(ret) == 0 {
		panic("no return value specified for GetFirmwareVersionAndPSID")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (string, string, error)); ok {
		return rf(pciAddr)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(pciAddr)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(pciAddr)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(pciAddr)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetInterfaceName provides a mock function with given fields: pciAddr
func (_m *DeviceDiscoveryUtils) GetInterfaceName(pciAddr string) string {
	ret := _m.Called(pciAddr)

	if len(ret) == 0 {
		panic("no return value specified for GetInterfaceName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(pciAddr)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetLinkType provides a mock function with given fields: name
func (_m *DeviceDiscoveryUtils) GetLinkType(name string) string {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetLinkType")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetPCIDevices provides a mock function with no fields
func (_m *DeviceDiscoveryUtils) GetPCIDevices() ([]*pci.Device, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPCIDevices")
	}

	var r0 []*pci.Device
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*pci.Device, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*pci.Device); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pci.Device)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPartAndSerialNumber provides a mock function with given fields: pciAddr
func (_m *DeviceDiscoveryUtils) GetPartAndSerialNumber(pciAddr string) (string, string, error) {
	ret := _m.Called(pciAddr)

	if len(ret) == 0 {
		panic("no return value specified for GetPartAndSerialNumber")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (string, string, error)); ok {
		return rf(pciAddr)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(pciAddr)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(pciAddr)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(pciAddr)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetRDMADeviceName provides a mock function with given fields: pciAddr
func (_m *DeviceDiscoveryUtils) GetRDMADeviceName(pciAddr string) string {
	ret := _m.Called(pciAddr)

	if len(ret) == 0 {
		panic("no return value specified for GetRDMADeviceName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(pciAddr)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IsSriovVF provides a mock function with given fields: pciAddr
func (_m *DeviceDiscoveryUtils) IsSriovVF(pciAddr string) bool {
	ret := _m.Called(pciAddr)

	if len(ret) == 0 {
		panic("no return value specified for IsSriovVF")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(pciAddr)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewDeviceDiscoveryUtils creates a new instance of DeviceDiscoveryUtils. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDeviceDiscoveryUtils(t interface {
	mock.TestingT
	Cleanup(func())
}) *DeviceDiscoveryUtils {
	mock := &DeviceDiscoveryUtils{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
