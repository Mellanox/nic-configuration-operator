// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// FirmwareUtils is an autogenerated mock type for the FirmwareUtils type
type FirmwareUtils struct {
	mock.Mock
}

// BurnNicFirmware provides a mock function with given fields: ctx, pciAddress, fwPath
func (_m *FirmwareUtils) BurnNicFirmware(ctx context.Context, pciAddress string, fwPath string) error {
	ret := _m.Called(ctx, pciAddress, fwPath)

	if len(ret) == 0 {
		panic("no return value specified for BurnNicFirmware")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, pciAddress, fwPath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CleanupDirectory provides a mock function with given fields: root, allowedSet
func (_m *FirmwareUtils) CleanupDirectory(root string, allowedSet map[string]struct{}) error {
	ret := _m.Called(root, allowedSet)

	if len(ret) == 0 {
		panic("no return value specified for CleanupDirectory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string]struct{}) error); ok {
		r0 = rf(root, allowedSet)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DownloadFile provides a mock function with given fields: url, destPath
func (_m *FirmwareUtils) DownloadFile(url string, destPath string) error {
	ret := _m.Called(url, destPath)

	if len(ret) == 0 {
		panic("no return value specified for DownloadFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(url, destPath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBurnedFirmwareVersionFromDevice provides a mock function with given fields: pciAddress
func (_m *FirmwareUtils) GetBurnedFirmwareVersionFromDevice(pciAddress string) (string, error) {
	ret := _m.Called(pciAddress)

	if len(ret) == 0 {
		panic("no return value specified for GetBurnedFirmwareVersionFromDevice")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(pciAddress)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(pciAddress)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pciAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDocaSpcXCCVersion provides a mock function with given fields: docaSpcXCCPath
func (_m *FirmwareUtils) GetDocaSpcXCCVersion(docaSpcXCCPath string) (string, error) {
	ret := _m.Called(docaSpcXCCPath)

	if len(ret) == 0 {
		panic("no return value specified for GetDocaSpcXCCVersion")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(docaSpcXCCPath)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(docaSpcXCCPath)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(docaSpcXCCPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFWVersionsFromBFB provides a mock function with given fields: bfbPath
func (_m *FirmwareUtils) GetFWVersionsFromBFB(bfbPath string) (map[string]string, error) {
	ret := _m.Called(bfbPath)

	if len(ret) == 0 {
		panic("no return value specified for GetFWVersionsFromBFB")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (map[string]string, error)); ok {
		return rf(bfbPath)
	}
	if rf, ok := ret.Get(0).(func(string) map[string]string); ok {
		r0 = rf(bfbPath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(bfbPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFirmwareVersionAndPSIDFromFWBinary provides a mock function with given fields: firmwareBinaryPath
func (_m *FirmwareUtils) GetFirmwareVersionAndPSIDFromFWBinary(firmwareBinaryPath string) (string, string, error) {
	ret := _m.Called(firmwareBinaryPath)

	if len(ret) == 0 {
		panic("no return value specified for GetFirmwareVersionAndPSIDFromFWBinary")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (string, string, error)); ok {
		return rf(firmwareBinaryPath)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(firmwareBinaryPath)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(firmwareBinaryPath)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(firmwareBinaryPath)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetInstalledDebPackageVersion provides a mock function with given fields: packageName
func (_m *FirmwareUtils) GetInstalledDebPackageVersion(packageName string) string {
	ret := _m.Called(packageName)

	if len(ret) == 0 {
		panic("no return value specified for GetInstalledDebPackageVersion")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(packageName)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// InstallDebPackage provides a mock function with given fields: debPath
func (_m *FirmwareUtils) InstallDebPackage(debPath string) error {
	ret := _m.Called(debPath)

	if len(ret) == 0 {
		panic("no return value specified for InstallDebPackage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(debPath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnzipFiles provides a mock function with given fields: zipPath, destDir
func (_m *FirmwareUtils) UnzipFiles(zipPath string, destDir string) ([]string, error) {
	ret := _m.Called(zipPath, destDir)

	if len(ret) == 0 {
		panic("no return value specified for UnzipFiles")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]string, error)); ok {
		return rf(zipPath, destDir)
	}
	if rf, ok := ret.Get(0).(func(string, string) []string); ok {
		r0 = rf(zipPath, destDir)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(zipPath, destDir)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyImageBootable provides a mock function with given fields: firmwareBinaryPath
func (_m *FirmwareUtils) VerifyImageBootable(firmwareBinaryPath string) error {
	ret := _m.Called(firmwareBinaryPath)

	if len(ret) == 0 {
		panic("no return value specified for VerifyImageBootable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(firmwareBinaryPath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewFirmwareUtils creates a new instance of FirmwareUtils. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFirmwareUtils(t interface {
	mock.TestingT
	Cleanup(func())
}) *FirmwareUtils {
	mock := &FirmwareUtils{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
