// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// ProvisioningUtils is an autogenerated mock type for the ProvisioningUtils type
type ProvisioningUtils struct {
	mock.Mock
}

// CleanupDirectory provides a mock function with given fields: root, allowedSet
func (_m *ProvisioningUtils) CleanupDirectory(root string, allowedSet map[string]struct{}) error {
	ret := _m.Called(root, allowedSet)

	if len(ret) == 0 {
		panic("no return value specified for CleanupDirectory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string]struct{}) error); ok {
		r0 = rf(root, allowedSet)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DownloadFile provides a mock function with given fields: url, destPath
func (_m *ProvisioningUtils) DownloadFile(url string, destPath string) error {
	ret := _m.Called(url, destPath)

	if len(ret) == 0 {
		panic("no return value specified for DownloadFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(url, destPath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFirmwareVersionAndPSID provides a mock function with given fields: firmwareBinaryPath
func (_m *ProvisioningUtils) GetFirmwareVersionAndPSID(firmwareBinaryPath string) (string, string, error) {
	ret := _m.Called(firmwareBinaryPath)

	if len(ret) == 0 {
		panic("no return value specified for GetFirmwareVersionAndPSID")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (string, string, error)); ok {
		return rf(firmwareBinaryPath)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(firmwareBinaryPath)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(firmwareBinaryPath)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(firmwareBinaryPath)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UnzipFiles provides a mock function with given fields: zipPath, destDir
func (_m *ProvisioningUtils) UnzipFiles(zipPath string, destDir string) ([]string, error) {
	ret := _m.Called(zipPath, destDir)

	if len(ret) == 0 {
		panic("no return value specified for UnzipFiles")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]string, error)); ok {
		return rf(zipPath, destDir)
	}
	if rf, ok := ret.Get(0).(func(string, string) []string); ok {
		r0 = rf(zipPath, destDir)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(zipPath, destDir)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProvisioningUtils creates a new instance of ProvisioningUtils. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProvisioningUtils(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProvisioningUtils {
	mock := &ProvisioningUtils{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
