// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/Mellanox/nic-configuration-operator/api/v1alpha1"
)

// HostManager is an autogenerated mock type for the HostManager type
type HostManager struct {
	mock.Mock
}

// ApplyDeviceNvSpec provides a mock function with given fields: ctx, device
func (_m *HostManager) ApplyDeviceNvSpec(ctx context.Context, device *v1alpha1.NicDevice) (bool, error) {
	ret := _m.Called(ctx, device)

	if len(ret) == 0 {
		panic("no return value specified for ApplyDeviceNvSpec")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.NicDevice) (bool, error)); ok {
		return rf(ctx, device)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.NicDevice) bool); ok {
		r0 = rf(ctx, device)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1alpha1.NicDevice) error); ok {
		r1 = rf(ctx, device)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplyDeviceRuntimeSpec provides a mock function with given fields: device
func (_m *HostManager) ApplyDeviceRuntimeSpec(device *v1alpha1.NicDevice) error {
	ret := _m.Called(device)

	if len(ret) == 0 {
		panic("no return value specified for ApplyDeviceRuntimeSpec")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1alpha1.NicDevice) error); ok {
		r0 = rf(device)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DiscoverNicDevices provides a mock function with given fields:
func (_m *HostManager) DiscoverNicDevices() (map[string]v1alpha1.NicDeviceStatus, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DiscoverNicDevices")
	}

	var r0 map[string]v1alpha1.NicDeviceStatus
	var r1 error
	if rf, ok := ret.Get(0).(func() (map[string]v1alpha1.NicDeviceStatus, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[string]v1alpha1.NicDeviceStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]v1alpha1.NicDeviceStatus)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiscoverOfedVersion provides a mock function with given fields:
func (_m *HostManager) DiscoverOfedVersion() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DiscoverOfedVersion")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ResetNicFirmware provides a mock function with given fields: ctx, device
func (_m *HostManager) ResetNicFirmware(ctx context.Context, device *v1alpha1.NicDevice) (bool, error) {
	ret := _m.Called(ctx, device)

	if len(ret) == 0 {
		panic("no return value specified for ResetNicFirmware")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.NicDevice) (bool, error)); ok {
		return rf(ctx, device)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.NicDevice) bool); ok {
		r0 = rf(ctx, device)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1alpha1.NicDevice) error); ok {
		r1 = rf(ctx, device)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateDeviceNvSpec provides a mock function with given fields: ctx, device
func (_m *HostManager) ValidateDeviceNvSpec(ctx context.Context, device *v1alpha1.NicDevice) (bool, bool, error) {
	ret := _m.Called(ctx, device)

	if len(ret) == 0 {
		panic("no return value specified for ValidateDeviceNvSpec")
	}

	var r0 bool
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.NicDevice) (bool, bool, error)); ok {
		return rf(ctx, device)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.NicDevice) bool); ok {
		r0 = rf(ctx, device)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1alpha1.NicDevice) bool); ok {
		r1 = rf(ctx, device)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *v1alpha1.NicDevice) error); ok {
		r2 = rf(ctx, device)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewHostManager creates a new instance of HostManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHostManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *HostManager {
	mock := &HostManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
