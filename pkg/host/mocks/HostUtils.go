// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"

	types "github.com/Mellanox/nic-configuration-operator/pkg/types"
)

// HostUtils is an autogenerated mock type for the HostUtils type
type HostUtils struct {
	mock.Mock
}

// GetHostUptimeSeconds provides a mock function with no fields
func (_m *HostUtils) GetHostUptimeSeconds() (time.Duration, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHostUptimeSeconds")
	}

	var r0 time.Duration
	var r1 error
	if rf, ok := ret.Get(0).(func() (time.Duration, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLinkType provides a mock function with given fields: name
func (_m *HostUtils) GetLinkType(name string) string {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetLinkType")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetMaxReadRequestSize provides a mock function with given fields: pciAddr
func (_m *HostUtils) GetMaxReadRequestSize(pciAddr string) (int, error) {
	ret := _m.Called(pciAddr)

	if len(ret) == 0 {
		panic("no return value specified for GetMaxReadRequestSize")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int, error)); ok {
		return rf(pciAddr)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(pciAddr)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pciAddr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOfedVersion provides a mock function with no fields
func (_m *HostUtils) GetOfedVersion() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOfedVersion")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetPCILinkSpeed provides a mock function with given fields: pciAddr
func (_m *HostUtils) GetPCILinkSpeed(pciAddr string) (int, error) {
	ret := _m.Called(pciAddr)

	if len(ret) == 0 {
		panic("no return value specified for GetPCILinkSpeed")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int, error)); ok {
		return rf(pciAddr)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(pciAddr)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pciAddr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrustAndPFC provides a mock function with given fields: interfaceName
func (_m *HostUtils) GetTrustAndPFC(interfaceName string) (string, string, error) {
	ret := _m.Called(interfaceName)

	if len(ret) == 0 {
		panic("no return value specified for GetTrustAndPFC")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (string, string, error)); ok {
		return rf(interfaceName)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(interfaceName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(interfaceName)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(interfaceName)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// QueryNvConfig provides a mock function with given fields: ctx, pciAddr
func (_m *HostUtils) QueryNvConfig(ctx context.Context, pciAddr string) (types.NvConfigQuery, error) {
	ret := _m.Called(ctx, pciAddr)

	if len(ret) == 0 {
		panic("no return value specified for QueryNvConfig")
	}

	var r0 types.NvConfigQuery
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (types.NvConfigQuery, error)); ok {
		return rf(ctx, pciAddr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) types.NvConfigQuery); ok {
		r0 = rf(ctx, pciAddr)
	} else {
		r0 = ret.Get(0).(types.NvConfigQuery)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, pciAddr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetNicFirmware provides a mock function with given fields: ctx, pciAddr
func (_m *HostUtils) ResetNicFirmware(ctx context.Context, pciAddr string) error {
	ret := _m.Called(ctx, pciAddr)

	if len(ret) == 0 {
		panic("no return value specified for ResetNicFirmware")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, pciAddr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResetNvConfig provides a mock function with given fields: pciAddr
func (_m *HostUtils) ResetNvConfig(pciAddr string) error {
	ret := _m.Called(pciAddr)

	if len(ret) == 0 {
		panic("no return value specified for ResetNvConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(pciAddr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScheduleReboot provides a mock function with no fields
func (_m *HostUtils) ScheduleReboot() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ScheduleReboot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetMaxReadRequestSize provides a mock function with given fields: pciAddr, maxReadRequestSize
func (_m *HostUtils) SetMaxReadRequestSize(pciAddr string, maxReadRequestSize int) error {
	ret := _m.Called(pciAddr, maxReadRequestSize)

	if len(ret) == 0 {
		panic("no return value specified for SetMaxReadRequestSize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int) error); ok {
		r0 = rf(pciAddr, maxReadRequestSize)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetNvConfigParameter provides a mock function with given fields: pciAddr, paramName, paramValue
func (_m *HostUtils) SetNvConfigParameter(pciAddr string, paramName string, paramValue string) error {
	ret := _m.Called(pciAddr, paramName, paramValue)

	if len(ret) == 0 {
		panic("no return value specified for SetNvConfigParameter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(pciAddr, paramName, paramValue)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetTrustAndPFC provides a mock function with given fields: interfaceName, trust, pfc
func (_m *HostUtils) SetTrustAndPFC(interfaceName string, trust string, pfc string) error {
	ret := _m.Called(interfaceName, trust, pfc)

	if len(ret) == 0 {
		panic("no return value specified for SetTrustAndPFC")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(interfaceName, trust, pfc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewHostUtils creates a new instance of HostUtils. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHostUtils(t interface {
	mock.TestingT
	Cleanup(func())
}) *HostUtils {
	mock := &HostUtils{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
