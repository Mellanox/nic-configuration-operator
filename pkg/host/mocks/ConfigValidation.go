// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	v1alpha1 "github.com/Mellanox/nic-configuration-operator/api/v1alpha1"
	types "github.com/Mellanox/nic-configuration-operator/pkg/types"
	mock "github.com/stretchr/testify/mock"
)

// ConfigValidation is an autogenerated mock type for the ConfigValidation type
type ConfigValidation struct {
	mock.Mock
}

// AdvancedPCISettingsEnabled provides a mock function with given fields: nvConfig
func (_m *ConfigValidation) AdvancedPCISettingsEnabled(nvConfig types.NvConfigQuery) bool {
	ret := _m.Called(nvConfig)

	if len(ret) == 0 {
		panic("no return value specified for AdvancedPCISettingsEnabled")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(types.NvConfigQuery) bool); ok {
		r0 = rf(nvConfig)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CalculateDesiredRuntimeConfig provides a mock function with given fields: device
func (_m *ConfigValidation) CalculateDesiredRuntimeConfig(device *v1alpha1.NicDevice) (int, string, string) {
	ret := _m.Called(device)

	if len(ret) == 0 {
		panic("no return value specified for CalculateDesiredRuntimeConfig")
	}

	var r0 int
	var r1 string
	var r2 string
	if rf, ok := ret.Get(0).(func(*v1alpha1.NicDevice) (int, string, string)); ok {
		return rf(device)
	}
	if rf, ok := ret.Get(0).(func(*v1alpha1.NicDevice) int); ok {
		r0 = rf(device)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(*v1alpha1.NicDevice) string); ok {
		r1 = rf(device)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(*v1alpha1.NicDevice) string); ok {
		r2 = rf(device)
	} else {
		r2 = ret.Get(2).(string)
	}

	return r0, r1, r2
}

// ConstructNvParamMapFromTemplate provides a mock function with given fields: device, nvConfigQuery
func (_m *ConfigValidation) ConstructNvParamMapFromTemplate(device *v1alpha1.NicDevice, nvConfigQuery types.NvConfigQuery) (map[string]string, error) {
	ret := _m.Called(device, nvConfigQuery)

	if len(ret) == 0 {
		panic("no return value specified for ConstructNvParamMapFromTemplate")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(*v1alpha1.NicDevice, types.NvConfigQuery) (map[string]string, error)); ok {
		return rf(device, nvConfigQuery)
	}
	if rf, ok := ret.Get(0).(func(*v1alpha1.NicDevice, types.NvConfigQuery) map[string]string); ok {
		r0 = rf(device, nvConfigQuery)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(*v1alpha1.NicDevice, types.NvConfigQuery) error); ok {
		r1 = rf(device, nvConfigQuery)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RuntimeConfigApplied provides a mock function with given fields: device
func (_m *ConfigValidation) RuntimeConfigApplied(device *v1alpha1.NicDevice) (bool, error) {
	ret := _m.Called(device)

	if len(ret) == 0 {
		panic("no return value specified for RuntimeConfigApplied")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*v1alpha1.NicDevice) (bool, error)); ok {
		return rf(device)
	}
	if rf, ok := ret.Get(0).(func(*v1alpha1.NicDevice) bool); ok {
		r0 = rf(device)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*v1alpha1.NicDevice) error); ok {
		r1 = rf(device)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateResetToDefault provides a mock function with given fields: nvConfig
func (_m *ConfigValidation) ValidateResetToDefault(nvConfig types.NvConfigQuery) (bool, bool, error) {
	ret := _m.Called(nvConfig)

	if len(ret) == 0 {
		panic("no return value specified for ValidateResetToDefault")
	}

	var r0 bool
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(types.NvConfigQuery) (bool, bool, error)); ok {
		return rf(nvConfig)
	}
	if rf, ok := ret.Get(0).(func(types.NvConfigQuery) bool); ok {
		r0 = rf(nvConfig)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(types.NvConfigQuery) bool); ok {
		r1 = rf(nvConfig)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(types.NvConfigQuery) error); ok {
		r2 = rf(nvConfig)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// newConfigValidation creates a new instance of ConfigValidation. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newConfigValidation(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConfigValidation {
	mock := &ConfigValidation{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
