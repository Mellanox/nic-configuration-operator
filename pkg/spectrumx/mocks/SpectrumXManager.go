// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/Mellanox/nic-configuration-operator/api/v1alpha1"
)

// SpectrumXManager is an autogenerated mock type for the SpectrumXManager type
type SpectrumXManager struct {
	mock.Mock
}

// ApplyNvConfig provides a mock function with given fields: device
func (_m *SpectrumXManager) ApplyNvConfig(device *v1alpha1.NicDevice) (bool, error) {
	ret := _m.Called(device)

	if len(ret) == 0 {
		panic("no return value specified for ApplyNvConfig")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*v1alpha1.NicDevice) (bool, error)); ok {
		return rf(device)
	}
	if rf, ok := ret.Get(0).(func(*v1alpha1.NicDevice) bool); ok {
		r0 = rf(device)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*v1alpha1.NicDevice) error); ok {
		r1 = rf(device)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplyRuntimeConfig provides a mock function with given fields: device
func (_m *SpectrumXManager) ApplyRuntimeConfig(device *v1alpha1.NicDevice) error {
	ret := _m.Called(device)

	if len(ret) == 0 {
		panic("no return value specified for ApplyRuntimeConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1alpha1.NicDevice) error); ok {
		r0 = rf(device)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDocaCCTargetVersion provides a mock function with given fields: device
func (_m *SpectrumXManager) GetDocaCCTargetVersion(device *v1alpha1.NicDevice) (string, error) {
	ret := _m.Called(device)

	if len(ret) == 0 {
		panic("no return value specified for GetDocaCCTargetVersion")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*v1alpha1.NicDevice) (string, error)); ok {
		return rf(device)
	}
	if rf, ok := ret.Get(0).(func(*v1alpha1.NicDevice) string); ok {
		r0 = rf(device)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*v1alpha1.NicDevice) error); ok {
		r1 = rf(device)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NvConfigApplied provides a mock function with given fields: device
func (_m *SpectrumXManager) NvConfigApplied(device *v1alpha1.NicDevice) (bool, error) {
	ret := _m.Called(device)

	if len(ret) == 0 {
		panic("no return value specified for NvConfigApplied")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*v1alpha1.NicDevice) (bool, error)); ok {
		return rf(device)
	}
	if rf, ok := ret.Get(0).(func(*v1alpha1.NicDevice) bool); ok {
		r0 = rf(device)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*v1alpha1.NicDevice) error); ok {
		r1 = rf(device)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunDocaSpcXCC provides a mock function with given fields: port
func (_m *SpectrumXManager) RunDocaSpcXCC(port v1alpha1.NicDevicePortSpec) error {
	ret := _m.Called(port)

	if len(ret) == 0 {
		panic("no return value specified for RunDocaSpcXCC")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(v1alpha1.NicDevicePortSpec) error); ok {
		r0 = rf(port)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RuntimeConfigApplied provides a mock function with given fields: device
func (_m *SpectrumXManager) RuntimeConfigApplied(device *v1alpha1.NicDevice) (bool, error) {
	ret := _m.Called(device)

	if len(ret) == 0 {
		panic("no return value specified for RuntimeConfigApplied")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*v1alpha1.NicDevice) (bool, error)); ok {
		return rf(device)
	}
	if rf, ok := ret.Get(0).(func(*v1alpha1.NicDevice) bool); ok {
		r0 = rf(device)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*v1alpha1.NicDevice) error); ok {
		r1 = rf(device)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSpectrumXManager creates a new instance of SpectrumXManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSpectrumXManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *SpectrumXManager {
	mock := &SpectrumXManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
