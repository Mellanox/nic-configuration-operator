// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	dms "github.com/Mellanox/nic-configuration-operator/pkg/dms"
	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/Mellanox/nic-configuration-operator/api/v1alpha1"
)

// DMSManager is an autogenerated mock type for the DMSManager type
type DMSManager struct {
	mock.Mock
}

// GetDMSClientBySerialNumber provides a mock function with given fields: serialNumber
func (_m *DMSManager) GetDMSClientBySerialNumber(serialNumber string) (dms.DMSClient, error) {
	ret := _m.Called(serialNumber)

	if len(ret) == 0 {
		panic("no return value specified for GetDMSClientBySerialNumber")
	}

	var r0 dms.DMSClient
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (dms.DMSClient, error)); ok {
		return rf(serialNumber)
	}
	if rf, ok := ret.Get(0).(func(string) dms.DMSClient); ok {
		r0 = rf(serialNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dms.DMSClient)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(serialNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartDMSInstances provides a mock function with given fields: devices
func (_m *DMSManager) StartDMSInstances(devices []v1alpha1.NicDeviceStatus) error {
	ret := _m.Called(devices)

	if len(ret) == 0 {
		panic("no return value specified for StartDMSInstances")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]v1alpha1.NicDeviceStatus) error); ok {
		r0 = rf(devices)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StopAllDMSInstances provides a mock function with no fields
func (_m *DMSManager) StopAllDMSInstances() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for StopAllDMSInstances")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDMSManager creates a new instance of DMSManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDMSManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *DMSManager {
	mock := &DMSManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
