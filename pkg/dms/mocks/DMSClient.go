// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// DMSClient is an autogenerated mock type for the DMSClient type
type DMSClient struct {
	mock.Mock
}

// GetQoSSettings provides a mock function with given fields: interfaceName
func (_m *DMSClient) GetQoSSettings(interfaceName string) (string, string, error) {
	ret := _m.Called(interfaceName)

	if len(ret) == 0 {
		panic("no return value specified for GetQoSSettings")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (string, string, error)); ok {
		return rf(interfaceName)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(interfaceName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(interfaceName)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(interfaceName)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IsRunning provides a mock function with no fields
func (_m *DMSClient) IsRunning() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsRunning")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SetQoSSettings provides a mock function with given fields: trustMode, pfc
func (_m *DMSClient) SetQoSSettings(trustMode string, pfc string) error {
	ret := _m.Called(trustMode, pfc)

	if len(ret) == 0 {
		panic("no return value specified for SetQoSSettings")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(trustMode, pfc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InstallBFB provides a mock function with given fields: ctx, version, bfbPath
func (_m *DMSClient) InstallBFB(ctx context.Context, version string, bfbPath string) error {
	ret := _m.Called(ctx, version, bfbPath)

	if len(ret) == 0 {
		panic("no return value specified for InstallBFB")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, version, bfbPath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDMSClient creates a new instance of DMSClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDMSClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *DMSClient {
	mock := &DMSClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
