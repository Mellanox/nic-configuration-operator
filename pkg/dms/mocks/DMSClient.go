// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/Mellanox/nic-configuration-operator/pkg/types"

	v1alpha1 "github.com/Mellanox/nic-configuration-operator/api/v1alpha1"
)

// DMSClient is an autogenerated mock type for the DMSClient type
type DMSClient struct {
	mock.Mock
}

// GetParameters provides a mock function with given fields: params
func (_m *DMSClient) GetParameters(params []types.ConfigurationParameter) (map[string]string, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for GetParameters")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func([]types.ConfigurationParameter) (map[string]string, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func([]types.ConfigurationParameter) map[string]string); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func([]types.ConfigurationParameter) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQoSSettings provides a mock function with given fields: interfaceName
func (_m *DMSClient) GetQoSSettings(interfaceName string) (*v1alpha1.QosSpec, error) {
	ret := _m.Called(interfaceName)

	if len(ret) == 0 {
		panic("no return value specified for GetQoSSettings")
	}

	var r0 *v1alpha1.QosSpec
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*v1alpha1.QosSpec, error)); ok {
		return rf(interfaceName)
	}
	if rf, ok := ret.Get(0).(func(string) *v1alpha1.QosSpec); ok {
		r0 = rf(interfaceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.QosSpec)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(interfaceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InstallBFB provides a mock function with given fields: ctx, version, bfbPath
func (_m *DMSClient) InstallBFB(ctx context.Context, version string, bfbPath string) error {
	ret := _m.Called(ctx, version, bfbPath)

	if len(ret) == 0 {
		panic("no return value specified for InstallBFB")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, version, bfbPath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsRunning provides a mock function with no fields
func (_m *DMSClient) IsRunning() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsRunning")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SetParameters provides a mock function with given fields: params
func (_m *DMSClient) SetParameters(params []types.ConfigurationParameter) error {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for SetParameters")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]types.ConfigurationParameter) error); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetQoSSettings provides a mock function with given fields: spec
func (_m *DMSClient) SetQoSSettings(spec *v1alpha1.QosSpec) error {
	ret := _m.Called(spec)

	if len(ret) == 0 {
		panic("no return value specified for SetQoSSettings")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1alpha1.QosSpec) error); ok {
		r0 = rf(spec)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDMSClient creates a new instance of DMSClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDMSClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *DMSClient {
	mock := &DMSClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
